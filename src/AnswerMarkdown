import React from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';

interface AnswerSectionProps {
  content: string;
}

export const AnswerSection: React.FC<AnswerSectionProps> = ({ content }) => {
  return (
    <div className="p-5 bg-white rounded-b-sm">
      <div className="flex items-center mb-4 font-semibold text-gray-800">
        <span className="font-mono">Answer</span>
      </div>
      <div className="prose prose-sm max-w-none prose-gray custom-scrollbar">
        <ReactMarkdown
          remarkPlugins={[remarkGfm]}
          components={{
            // Custom styling for markdown elements - fixed table and code rendering
            h1: ({ children }) => <h1 className="text-xl font-bold mb-3 text-gray-800">{children}</h1>,
            h2: ({ children }) => <h2 className="text-lg font-semibold mb-2 text-gray-800">{children}</h2>,
            h3: ({ children }) => <h3 className="text-md font-semibold mb-2 text-gray-800">{children}</h3>,
            h4: ({ children }) => <h4 className="text-sm font-semibold mb-1 text-gray-800">{children}</h4>,
            p: ({ children }) => <p className="text-base leading-relaxed mb-3 text-gray-700">{children}</p>,
            code: ({ children, className }) => {
              // Check if it's inline code or block code
              const isInline = !className;
              if (isInline) {
                return <code className="bg-gray-100 px-2 py-1 rounded text-sm font-mono text-gray-800 border">{children}</code>;
              }
              return <code className="block">{children}</code>;
            },
            pre: ({ children }) => (
              <pre className="bg-gray-100 p-4 rounded-lg text-sm font-mono overflow-x-auto mb-3 border border-gray-300 custom-scrollbar whitespace-pre">
                {children}
              </pre>
            ),
            ul: ({ children }) => <ul className="list-disc list-inside mb-3 text-base text-gray-700 space-y-1">{children}</ul>,
            ol: ({ children }) => <ol className="list-decimal list-inside mb-3 text-base text-gray-700 space-y-1">{children}</ol>,
            li: ({ children }) => <li className="mb-1 leading-relaxed">{children}</li>,
            blockquote: ({ children }) => <blockquote className="border-l-4 border-indigo-300 pl-4 italic text-gray-600 mb-3 bg-indigo-50 py-2">{children}</blockquote>,
            strong: ({ children }) => <strong className="font-semibold text-gray-800">{children}</strong>,
            em: ({ children }) => <em className="italic text-gray-700">{children}</em>,
            a: ({ children, href }) => <a href={href} className="text-indigo-600 hover:text-indigo-800 underline transition-colors" target="_blank" rel="noopener noreferrer">{children}</a>,
            
            // Enhanced table styling
            table: ({ children }) => (
              <div className="overflow-x-auto mb-4">
                <table className="min-w-full border-collapse bg-white shadow-sm rounded-lg overflow-hidden">
                  {children}
                </table>
              </div>
            ),
            thead: ({ children }) => <thead className="bg-gray-100">{children}</thead>,
            tbody: ({ children }) => <tbody className="divide-y divide-gray-200">{children}</tbody>,
            tr: ({ children }) => <tr className="hover:bg-gray-50 transition-colors">{children}</tr>,
            th: ({ children }) => (
              <th className="px-4 py-3 text-left text-sm font-semibold text-gray-800 border-b-2 border-gray-200">
                {children}
              </th>
            ),
            td: ({ children }) => (
              <td className="px-4 py-3 text-sm text-gray-700 border-b border-gray-200">
                {children}
              </td>
            ),
            hr: () => <hr className="my-4 border-gray-300" />,
          }}
        >
          {content}
        </ReactMarkdown>
      </div>
    </div>
  );
};
